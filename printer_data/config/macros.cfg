#####################################################################
#   Macros
#####################################################################
[PAUSE_RESUME]

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  
    M117 Parked

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    M117 Home All
    G90                            ; absolute positioning
    G28                            ; home all axis 
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
    M117 All Homed
   
[gcode_macro PRINT_START]
gcode:
    SET_NOZZLE_LEDS_ON
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    M140 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    G90
    G32
    G1 Z5 F3000
    M190 S{BED_TEMP}
    BED_MESH_CALIBRATE ADAPTIVE=1
    G1 Y233 F3000
    G1 X175 F3000
    CLEAN_NOZZLE
    G1 Z25 F3000
    G28 Z0
    G1 X15 Y15 Z30 F5000
    G1 Z5 F3000 
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
      SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1  E-15.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    SET_NOZZLE_LEDS_OFF
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M117 Done Printing

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro HOME_X]
gcode:
    G90
    SET_NOZZLE_LEDS_ON
    {% if 'y' not in printer.toolhead.homed_axes %}
      {% if 'z' not in printer.toolhead.homed_axis %}
        SET_KINEMATIC_POSITION Z=0
        G1 Z5 F5000
        M84 Z
      {% else %}
        G1 Z5 F5000
      {% endif %}
    SET_KINEMATIC_POSITION Y=5
    G1 Y0 F5000
    M84 Y 
    G28 X0
    {% else %}
    G1 Y325 F5000
    G28 X0
    {% endif %}

[gcode_macro HOME_Y]
gcode:
    G90
    SET_NOZZLE_LEDS_ON
    {% if not 'z' in printer.toolhead.homed_axes %}
        SET_KINEMATIC_POSITION Z=0
        G1 Z5 F5000
    {% else %}
        G1 Z5 F5000
    {% endif %}
    G28 Y0

[gcode_macro HOME_Z]
gcode:
    G90
    SET_NOZZLE_LEDS_ON
    {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
      { action_raise_error("X and Y must be homed before Z") }
    {% else %}
        G1 X231 F5000
        G1 Y352 F5000
        G28 Z0
        G1 Z10 F5000
    {% endif %}